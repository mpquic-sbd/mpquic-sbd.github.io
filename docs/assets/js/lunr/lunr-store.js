var store = [{
        "title": "How to run MPQUIC-SBD",
        "excerpt":"Getting Started: Follow the instructions to set up an experimental environment and to download and install the MPQUIC-SBD artifacts.   ","categories": [],
        "tags": [],
        "url": "/docs/howto/",
        "teaser": null
      },{
        "title": "Install the Experimental Setup",
        "excerpt":"Repository Structure   The MPQUIC-SBD repository contains the following source code structure:   MPQUIC-SBD ├── build.sh                     # Script to compile the code in /src ├── example                      # Files and scripts for video processing ├── network/mininet              # Network scenarios for Mininet emulations ├── src                          |   └── quic-go                  # MPQUIC (Golang) extended to support SBD |   └── caddy                    # Caddy Web Server (Golang) |   └── AStream                  # A DASH player emulator (Python) |   └── dash                  |   |   └── client/proxy_module  # Client-side proxy module shared object (.so)   All source code files are designed to run on 64-bit Linux hosts.     Install, build, and run from a Vagrant VM   Following Steps 1, 2, and 3 below provides an easy way to run MPQUIC-SBD.    Step 1: Requirements  First, install Vagrant and VirtualBox on your host system.    Step 2: Build the Vagrant VM  To clone our repository and build the VM, run the following commands:    cd ~  git clone https://github.com/mpquic-sbd/mpquic-sbd-vagrant.git  cd mpquic-sbd-vagrant  sh setup.sh   Warning: Do not run sh setup.sh again; otherwise, it will overwrite the Vagrant base system.   Building: Using the Vagrant configuration file (VBox/Vagrantfile) provided below, the VM will be provisioned with 4GB of RAM and a 2-core CPU, with Ubuntu 18.04 LTS (Bionic Beaver) inside, which you can adjust as needed. Software packages will be automatically installed via the VBox/install.sh script. This ensures that the build process correctly installs Go 1.12, MPQUIC-SBD, the AStream Video Streaming Emulator, the Caddy Web Server, and Mininet.”   ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'  Vagrant.configure(\"2\") do |config|    config.vm.box = \"ubuntu/bionic64\"   config.ssh.forward_agent = true   config.ssh.forward_x11 = true    config.vm.synced_folder \"../Workstation\", \"/Workstation\"    config.vm.provider \"virtualbox\" do |vb|     # vb.gui = true     vb.memory = \"4000\"  # in MB     vb.cpus = \"4\"   end    config.vm.provision :shell, path: \"install.sh\", privileged: false end   After building, the experimental setup is located in the mpquic-sbd-vagrant/Workstation directory of your running VM and follows this structure:   # At your mpquic-sbd-vagrant/Workspace folder ├── Workspace |   ├── mpquic-sbd |   |   |   ├── example           # Files and scripts for video processing |   |   |   ├── network/mininet   # Network scenarios for Mininet emulations |   |   |   ├── /src              # Source files of the experimental setup |   |   |   ├── ...               # Other files    Step 3: Run the Vagrant VM   Assuming the mpquic-sbd-vagrant folder is located in your /home/&lt;user&gt;/ directory, navigate to the VBox folder, reload the virtual machine, and connect to it. Then, run the following commands:    cd ~  cd mpquic-sbd-vagrant/VBox  vagrant reload  vagrant ssh     Building the Applications Individually   Warning: If you ran setup.sh in Step 2, you already built everything using ./build.sh, then you’re all set. However, if you prefer to build the applications individually for any reason, follow the instructions below.   The Go modules are implemented using Go version 1.12. In this setup, the modules are built outside the GOPATH, with the local configuration redirecting module dependencies to their local implementations.   MPQUIC-SBD  To build MPQUIC-SBD, run:   cd /Workstation/mpquic-sbd/src/quic-go  go build ./...   The Go modules allow recursive builds, so this module does not need to be built explicitly in most cases. The MPQUIC module can be referenced by other Go modules through their go.mod files.   Caddy Server  To build the Caddy server, run:   cd /Workstation/mpquic-sbd/src/dash/caddy  go build   Client Proxy Module  To enable MPQUIC (in Go) to work transparently underneath the AStream DASH player (in Python), build the client proxy module as a shared object (.so):   cd /Workstation/mpquic-sbd/src/dash/client/proxy_module  go build -o proxy_module.so -buildmode=c-shared proxy_module.go   After building the proxy module, copy the AStream dependencies. You may also need to update the path in line 5 of src/dash/client/proxy_module/conn.py.    cd /Workstation/mpquic-sbd  cp src/dash/client/proxy_module/proxy_module.h src/AStream/dist/client/  cp src/dash/client/proxy_module/proxy_module.so src/AStream/dist/client/  cp src/dash/client/proxy_module/conn.py src/AStream/dist/client/  ","categories": [],
        "tags": [],
        "url": "/docs/installation/",
        "teaser": null
      },{
        "title": "1: ",
        "excerpt":"Install, build, and run from a Vagrant VM   Following the three steps below provides an easy way to run MPQUIC-SBD.    Step 1: Requirements  First, install Vagrant and VirtualBox on your host system.    Step 2: Build the Vagrant VM  To clone our repository and build the VM, run the following commands:    cd ~  git clone https://github.com/mpquic-sbd/mpquic-sbd-vagrant.git  cd mpquic-sbd-vagrant  sh setup.sh   Warning: Do not run sh setup.sh again; otherwise, it will overwrite the system.   Building: Using the Vagrant configuration file (VBox/Vagrantfile) provided below, the VM will be provisioned with 4GB of RAM and a 4-core CPU, which you can adjust as needed. Software packages will be automatically installed via the VBox/install.sh script. This ensures that the build process correctly installs Go 1.12, MPQUIC-SBD, the AStream Video Streaming Emulator, the Caddy Web Server, and Mininet.”   ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'  Vagrant.configure(\"2\") do |config|    config.vm.box = \"ubuntu/bionic64\"   config.ssh.forward_agent = true   config.ssh.forward_x11 = true    config.vm.synced_folder \"../Workstation\", \"/Workstation\"    config.vm.provider \"virtualbox\" do |vb|     # vb.gui = true     vb.memory = \"4000\"  # in MB     vb.cpus = \"4\"   end    config.vm.provision :shell, path: \"install.sh\", privileged: false end   After building, the experimental setup is located in the mpquic-sbd-vagrant/Workstation directory of your running VM and follows this structure:   # At your mpquic-sbd-vagrant folder ├── Workstation |   ├── mpquic-sbd |   |   |   ├── example           # Files and scripts for video processing |   |   |   ├── network/mininet   # Network scenarios for Mininet emulations |   |   |   ├── /src              # Source files of the experimental setup |   |   |   ├── ...               # Other files    Step 3: Run the Vagrant VM   Assuming the mpquic-sbd-vagrant folder is located in your /home/&lt;user&gt;/ directory, navigate to the VBox folder, reload the virtual machine, and connect to it. Then, run the following commands:    cd ~  cd mpquic-sbd-vagrant/VBox  vagrant reload  vagrant ssh     Building the Applications Individually   Warning: If you ran setup.sh in Step 2, you already built everything using ./build.sh, then you’re all set. However, if you prefer to build the applications individually for any reason, follow the instructions below.   The Go modules are implemented using Go version 1.12. In this setup, the modules are built outside the GOPATH, with the local configuration redirecting module dependencies to their local implementations.   MPQUIC-SBD  To build MPQUIC-SBD, run:   cd /Workstation/mpquic-sbd/src/quic-go  go build ./...   The Go modules allow recursive builds, so this module does not need to be built explicitly in most cases. The MPQUIC module can be referenced by other Go modules through their go.mod files.   Caddy Server  To build the Caddy server, run:   cd /Workstation/mpquic-sbd/src/dash/caddy  go build   Client Proxy Module  To enable MPQUIC (in Go) to work transparently underneath the AStream DASH player (in Python), build the client proxy module as a shared object (.so):   cd /Workstation/mpquic-sbd/src/dash/client/proxy_module  go build -o proxy_module.so -buildmode=c-shared proxy_module.go   After building the proxy module, copy the AStream dependencies. You may also need to update the path in line 5 of src/dash/client/proxy_module/conn.py.    cd /Workstation/mpquic-sbd  cp src/dash/client/proxy_module/proxy_module.h src/AStream/dist/client/  cp src/dash/client/proxy_module/proxy_module.so src/AStream/dist/client/  cp src/dash/client/proxy_module/conn.py src/AStream/dist/client/  ","categories": [],
        "tags": [],
        "url": "/docs/prepared-vm/",
        "teaser": null
      },{
        "title": "Run the video server application",
        "excerpt":"Running the application    Step 1: Run the Vagrant VM   Assuming the mpquic-sbd-vagrant folder is located in your /home/&lt;user&gt;/ directory, navigate to the VBox folder, reload the virtual machine, and connect to it. To do so, run the following commands:    cd ~  cd mpquic-sbd-vagrant/VBox  vagrant reload  vagrant ssh    Step 2: Run the video server (Caddy web server)   Inside the Vagrant VM, run the server from src/dash/caddy at the /Workstation/mpquic-sbd folder.   For a single-path transport over QUIC protocol, run the video server with:   cd /Workstation/mpquic-sbd/src/dash/caddy  ./caddy -quic   For a multi-path transport over MPQUIC protocol, run the video server with:   cd /Workstation/mpquic-sbd/src/dash/caddy  ./caddy -quic -mp    Step 3: Run the client player (AStream emulator)   Inside the Vagrant VM, run the AStream from src/AStream.   For a single-path client over QUIC protocol:   cd /Workstation/mpquic-sbd/src  python AStream/dist/client/dash_client.py \\     -m \"&lt;SERVER's URL TO MPD&gt;\" -p 'basic' -q   For a multi-path client over MPQUIC protocol:   cd /Workstation/mpquic-sbd/src  python AStream/dist/client/dash_client.py \\      -m \"&lt;SERVER's URL TO MPD&gt;\" -p 'basic' -q -mp  Note: The -p parameter specifies the ABR algorithm, where basic represents the throughput-based ABR. The &lt;SERVER's URL TO MPD&gt; parameter must be enclosed in double quotes, like this: \"https://localhost:4242/output_dash.mpd\"  ","categories": [],
        "tags": [],
        "url": "/docs/run-client-server/",
        "teaser": null
      },{
        "title": "Configure the video server",
        "excerpt":"For DASH video streaming, the Caddy server requires a configuration to serve the video segments. To achieve this, a file named Caddyfile must be set up.   In your Vagrant VM, the following Caddyfile for our network scenarios (see our publications) is placed at /home/vagrant/Workspace/mpquic-sbd folder.   # Unsecure listener for debugging purposes http://10.0.2.2:4040 {     root /home/vagrant/Workspace/video/     log stdout }  # Secure listener, required for TLS and QUIC connections https://10.0.2.2:4242 {     root /home/vagrant/Workspace/video/     tls self_signed     log stdout }   To configure the Caddy server at localhost, see this example.   ","categories": [],
        "tags": [],
        "url": "/docs/video-server/",
        "teaser": null
      },{
        "title": "Prepare the video files",
        "excerpt":"Offline enconding of video segments   In the example folder, you will find example files and code for creating segments and generating MPD representations. Following the three steps below offers an easy way to run MPQUIC-SBD.   Note: Video preparation is an offline process that may take significant time depending on the video’s length. We recommend performing this process outside the Vagrant VM, e.g., on your host system, which likely has greater computational resources.    Step 1: Requirements   First, install MP4Box and ffmpeg on your host system.   Warning: we are using the following versions:     MP4Box - GPAC version 2.0-rev2.0.0+dfsg1-2   ffmpeg version 4.4.3-0ubuntu1~20.04.sav1    Step 2: Enconding the video   To encode an mp4 video into videos of other formats and sizes, we use ffmpgeg. The following command example converts a 4k 60 fps video to a 240 MB 25 fps video.   ffmpeg -y -i 4k60fps.mp4 \\ -c:a aac -ac 2 -ab 128k -c:v libx264 \\ -x264opts 'keyint=96:min-keyint=96:no-scenecut' \\ -b:v 250k -maxrate 500k -bufsize 1000k -s 426x240 \\  -vf scale=426x240 -filter:v fps=25 video_240_25fps.mp4 &amp;     Step 3: Creating Video Segments and MPD File   After converting the videos to the desired formats, the next step is to segment them and generate the MPD file. The following example command creates 4-second video segments along with their corresponding representation.   MP4Box -dash 4000 \\ -segment-name 'segment_$RepresentationID$_' \\ -mpd-refresh 4 \\ -fps 25 video_240_25fps.mp4#video:id=240p \\ -fps 25 video_360_25fps.mp4#video:id=360p \\ -fps 25 video_480_25fps.mp4#video:id=480p \\ -fps 25 video_720_25fps.mp4#video:id=720p \\ -fps 60 video_720_60fps.mp4#video:id=7202p \\ -fps 25 video_1080_25fps.mp4#video:id=1080p \\ -fps 60 video_1080_60fps.mp4#video:id=10802p \\ -fps 30 video_1440_30fps.mp4#video:id=1440p \\ -fps 60 video_1440_60fps.mp4#video:id=14402p \\ -fps 30 video_2160_30fps.mp4#video:id=2560p \\ -fps 60 video_2160_60fps.mp4#video:id=25602p \\ -out output_dash.mpd   The SARA ABR algorithm requires the representation to include additional information for each segment, which MP4Box does not provide. To address this, a Python script was developed to modify the standard MPD generated by MP4Box into a format compatible with the SARA algorithm.   python modify_mpd.py    Note: The new MPD for the SARA ABR algorithm is saved as output_dash.mpd, located in the same folder as modify_mpd.py.   Step 4: Providing a video folder for the video server   In the mpquic-sbd-vagrant folder, there is a Workstation folder that is shared between your host and the Vagrant VM. You can create a folder inside Workstation (e.g., Workstation/videos) and move all the created segment files into it.   ├── /Workstation |   ├── mpquic-sbd   # Source files of the experimental setup |   ├── videos       # You can create a folder like this to store all your video files   ","categories": [],
        "tags": [],
        "url": "/docs/video/",
        "teaser": null
      },]
